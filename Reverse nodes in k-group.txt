/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* reverseKGroup(ListNode* head, int k) {
        ListNode* begin;
        ListNode* dummy = new ListNode(-1);
        dummy->next=head;
        begin = dummy;
        
        int i=0;
        while(head!=NULL){
            i++;
            if(i%k==0){
                begin=reverse(begin,head->next); 
                head=begin->next;
            }
            else{
                head=head->next;
            }
        }
        return dummy->next;
    }
    ListNode* reverse(ListNode* begin,ListNode* end){
        ListNode* curr=begin->next;
        ListNode* prev;
        ListNode* nextNode;
        prev=begin;
        ListNode* first = curr;
        while(curr!=end){
            nextNode=curr->next;
            curr->next=prev;
            prev=curr;
            curr=nextNode;
        }
        
        begin->next=prev;
        first->next=curr;
        return first;
    }
};