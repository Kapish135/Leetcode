class Solution {
public:

    int helper(vector<vector<int>>& grid,int m,int n,int i, int j,vector<vector<int>>& dp){

        if(i == m-1 && j == n-1) return dp[i][j] = grid[i][j];

        if(i >= m || j >= n) return 1e8;

        if(dp[i][j] != -1) return dp[i][j];

        int down = grid[i][j] + helper(grid,m,n,i+1,j,dp);
        int right = grid[i][j] + helper(grid,m,n,i,j+1,dp);

        return dp[i][j] = min(down, right);
    }

    int minPathSum(vector<vector<int>>& grid) {
        int m = grid.size();

        int n = grid[0].size();

        vector<vector<int>>dp(m,vector<int>(n,-1));
        int result = helper(grid,m,n,0,0,dp);

        return result;
    }

};