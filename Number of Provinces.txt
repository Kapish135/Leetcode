class Solution {
public:
    void dfs(int i,vector<int>adj[],vector<bool>&visited){
        visited[i] = true;
        for(auto a:adj[i]){
            if(!visited[a]) dfs(a,adj,visited);
        }
    }
    int findCircleNum(vector<vector<int>>& isConnected) {
        int n = isConnected.size();
        vector<bool>visited(n,false);
        vector<int>adj[n];
        int cnt = 0;
        for(int i = 0;i < n;i++){
            for(int j =0;j <n;j++){
                if(isConnected[i][j] == 1 && i!=j){
                    adj[i].push_back(j);
                    adj[j].push_back(i);
                }
            }
        }
        for(int i =0;i <n;i++){
            if(!visited[i]){
                cnt++;
                dfs(i,adj,visited);
            }
        }
        return cnt;
    }
};