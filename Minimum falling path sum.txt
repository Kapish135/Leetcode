class Solution {
public:
    int helper(vector<vector<int>>&matrix,int i,int j,int m,int n,vector<vector<int>>&dp){
        if(i > m-1) return 0;
        if(j > n-1 || j < 0 || i < 0) return 1e9;


        if(dp[i][j] != -1) return dp[i][j];

        int ans1 = matrix[i][j] + helper(matrix,i+1,j-1,m,n,dp);
        int ans2 = matrix[i][j] + helper(matrix,i+1,j,m,n,dp);
        int ans3 = matrix[i][j] + helper(matrix,i+1,j+1,m,n,dp);

        return dp[i][j] = min(ans1,min(ans2,ans3));
    }
    int minFallingPathSum(vector<vector<int>>& matrix) {
        int m = matrix.size();
        int n = matrix[0].size();
        int min_sum = INT_MAX;
        vector<vector<int>>dp(m,vector<int>(n,-1));
        for(int j=0;j < n;j++){
            min_sum = min(min_sum,helper(matrix,0,j,m,n,dp));
        }
        return min_sum;
    }
};