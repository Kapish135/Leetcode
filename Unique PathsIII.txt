class Solution {
public:
int helper(vector<vector<int>>& grid,int i,int j,int m,int n){
        if(i < 0 || j < 0 || i >= m || j >= n ||grid[i][j] == -1|| grid[i][j] == 3) return 0;

        if(grid[i][j] == 2){
            for(auto a:grid){
                for(auto b:a) if(b==0) return 0;
            }
            return 1;
        }

        grid[i][j] = 3;//have to do like this because we dont want to take any visited array
        int ans1 = helper(grid,i-1,j,m,n);
        int ans2 = helper(grid,i,j+1,m,n);
        int ans3 = helper(grid,i+1,j,m,n);
        int ans4 = helper(grid,i,j-1,m,n);
        grid[i][j] = 0;
        
        return ans1 + ans2 + ans3 + ans4;
        
    }
    int uniquePathsIII(vector<vector<int>>& grid) {
        int m = grid.size();
        int n = grid[0].size();
        int result;
        for(auto a=0;a<m;a++){
            for(auto b= 0;b<n;b++){
                if(grid[a][b] == 1){
                    result = helper(grid,a,b,m,n);
                    break;
                }
                
            }
        }
        return result;
    }
};