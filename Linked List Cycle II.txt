class Solution {
public:
    ListNode *detectCycle(ListNode *head) {
        // map<ListNode*,int> map;
        // ListNode* temp=head;
        // while(temp!=NULL){
        //     if(map.find(temp)!=map.end()){
        //         return temp;
        //     }
        //     map[temp]++;
        //     temp=temp->next;
        // }
        // return nullptr;

        ListNode* slow = head;
        ListNode* fast = head,*temp = head;

        while(fast && fast ->next){
            slow = slow->next;
            fast = fast->next->next;
            if(slow == fast){
                while(slow!=temp){
                    slow = slow->next;
                    temp = temp->next;
                }
                return slow;
            }
        }
        return nullptr;
    }
};