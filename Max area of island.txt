class Solution {
public:
    int maxAreaOfIsland(vector<vector<int>>& grid) {
        int m = grid.size();
        int n = grid[0].size();

        vector<vector<int>>visit(m,vector<int>(n,0));

        int drow[] = {-1,0,1,0};
        int dcol[] = {0,1,0,-1};

        queue<pair<int,int>>q;
        int max_area = 0;
        for(int i=0;i<m;i++){
            for(int j=0;j < n;j++){
                int sum = 0;
                if(grid[i][j] == 1 && visit[i][j] == 0){
                    visit[i][j] = 1;
                    sum +=1;
                    q.push({i,j});
                    while(!q.empty()){
                        int r = q.front().first;
                        int c = q.front().second;

                        q.pop();
                        for(int k=0;k < 4;k++){
                            int row = r + drow[k];
                            int col = c + dcol[k];

                            if(row >=0 && row < m && col >=0 && col < n && grid[row][col] == 1 && visit[row][col] == 0){
                                sum += 1;
                                visit[row][col] = 1;
                                q.push({row,col});
                            }
                        }
                    }
                    if(max_area < sum) max_area = sum;
                }
            }
        }
        return max_area;
    }
};